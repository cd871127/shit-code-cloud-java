String[] excludeProjects = ['lib-spring-boot-starter', 'lib-core']
configure(subprojects.findAll { !excludeProjects.contains(it.name) }) {
    apply plugin: 'org.springframework.boot'
    bootJar {
        rootSpec.exclude("**/config/*.yml")
    }
    apply from: "${project.rootDir}/buildInterface.gradle"
    apply from: "${project.rootDir}/docker.gradle"
    //打包自动推送lib包到本地仓库
    compileJava.dependsOn(":lib-spring-boot-starter:publishToMavenLocal")
    compileJava.dependsOn(":lib-core:publishToMavenLocal")
//common dependencies
    dependencies {
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-amqp'
//        implementation group: 'com.google.code.gson', name: 'gson', version: gSonVersion
        implementation group: 'de.codecentric', name: 'spring-boot-admin-starter-client', version: adminVersion
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-zipkin'
        implementation group: 'com.alibaba', name: 'fastjson', version: fastJsonVersion
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix'
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-consul'
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-consul-discovery'
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-consul-config'
        implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-logging'
        implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
        annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
        testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
        implementation group: 'com.shit_code.cloud', name: 'lib-spring-boot-starter', version: '0.0.1'
        implementation group: 'com.shit_code.cloud', name: 'lib-core', version: '0.0.1'
    }
}

String[] redisProjects = ['biz-template', 'service-shiro', 'service-consul','service-gateway']
configure(subprojects.findAll { redisProjects.contains(it.name) }) {
    dependencies {
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'
    }
}

String[] databaseProjects = ['biz-template', 'service-shiro','service-gateway']
configure(subprojects.findAll { databaseProjects.contains(it.name) }) {
    dependencies {
        implementation group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: mybatisVersion
        implementation group: 'mysql', name: 'mysql-connector-java', version: mysqlVersion
        implementation group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: pageHelperVersion

        //flyway
        implementation group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion
        implementation group: 'mysql', name: 'mysql-connector-java', version: mysqlVersion
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    }
}

//String[] rabbitmqProjects = ['biz-template']
//configure(subprojects.findAll { rabbitmqProjects.contains(it.name) }) {
//    dependencies {
//        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-amqp'
//    }
//}
